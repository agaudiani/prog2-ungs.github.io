Pila<T>

ArrayList<T> datos;

Pila()
	datos = new ArrayList<T>();

boolean vacia(){
	return datos.size() == 0;
}

int tamano(){
	return datos.size();
}

T tope() {
	return datos.get(tamano()-1);	
} 

T desapilar() {
	T elem = tope();
	datos.remove(tamano()-1);	
	return elem;
}

void apilar(T elem) {
	datos.add(elem);
}
sea p el tamano de la pila
O(p)
T minimo() {
	Pila<T> pilaAux = new Pila<T>(); 
	T min = tope();
	bool primeravez = false
	while (!vacio())	// minimo!
	{
		min = Math.min( min, tope())
		pilaAux.apilar(desapilar())
	}

	while (!pilaAux.vacio()) // reconstrullo this
	{
		aux = pilaAux.desapilar()

		if !aux.equals(min) || !primeravez
			apilar(aux)

		if aux.equals(min)
			primeravez = true			
	}
	return min
}

O(p^2)
Pila<T> ordenar(Pila<T> p1)
	Pila<T> pilaRet
	while (!p1.vacia())
		pilaRet.apilar(p1.minimo())	//O(p)
	return pilaRet


@Override
String toString() {
	return datos.toString();
}




